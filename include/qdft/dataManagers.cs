/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class dataManagers : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal dataManagers(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(dataManagers obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~dataManagers() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libqdftgraphPINVOKE.delete_dataManagers(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public string new_data(uint q, mode_type m, string dname) {
    string ret = libqdftgraphPINVOKE.dataManagers_new_data__SWIG_0(swigCPtr, q, (int)m, dname);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string new_data(uint q, mode_type m) {
    string ret = libqdftgraphPINVOKE.dataManagers_new_data__SWIG_1(swigCPtr, q, (int)m);
    return ret;
  }

  public void set_data_amount(string d, uint q) {
    libqdftgraphPINVOKE.dataManagers_set_data_amount(swigCPtr, d, q);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public void init(string d, uint qi, string c) {
    libqdftgraphPINVOKE.dataManagers_init(swigCPtr, d, qi, c);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint transfer(string d, uint qa, string c_src, string c_dst) {
    uint ret = libqdftgraphPINVOKE.dataManagers_transfer(swigCPtr, d, qa, c_src, c_dst);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void truncate(string d, string c, uint n) {
    libqdftgraphPINVOKE.dataManagers_truncate(swigCPtr, d, c, n);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public void set_edge_quantity(string d, uint q, string c_src, string c_dst) {
    libqdftgraphPINVOKE.dataManagers_set_edge_quantity(swigCPtr, d, q, c_src, c_dst);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public void revert_last_action(string d) {
    libqdftgraphPINVOKE.dataManagers_revert_last_action(swigCPtr, d);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint get_quantity(string d, string c) {
    uint ret = libqdftgraphPINVOKE.dataManagers_get_quantity(swigCPtr, d, c);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint get_data_amount(string d) {
    uint ret = libqdftgraphPINVOKE.dataManagers_get_data_amount(swigCPtr, d);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void show_graphs(SWIGTYPE_p_std__ostream arg0) {
    libqdftgraphPINVOKE.dataManagers_show_graphs__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0));
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public void show_graphs() {
    libqdftgraphPINVOKE.dataManagers_show_graphs__SWIG_1(swigCPtr);
  }

  public void save(string fname) {
    libqdftgraphPINVOKE.dataManagers_save(swigCPtr, fname);
    if (libqdftgraphPINVOKE.SWIGPendingException.Pending) throw libqdftgraphPINVOKE.SWIGPendingException.Retrieve();
  }

  public dataManagers() : this(libqdftgraphPINVOKE.new_dataManagers(), true) {
  }

}
